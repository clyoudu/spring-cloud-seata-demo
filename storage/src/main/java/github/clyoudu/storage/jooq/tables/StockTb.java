/*
 * This file is generated by jOOQ.
 */
package github.clyoudu.storage.jooq.tables;


import github.clyoudu.storage.jooq.Indexes;
import github.clyoudu.storage.jooq.Keys;
import github.clyoudu.storage.jooq.StockDb;
import github.clyoudu.storage.jooq.tables.records.StockTbRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StockTb extends TableImpl<StockTbRecord> {

    private static final long serialVersionUID = 753566767;

    /**
     * The reference instance of <code>stock_db.stock_tb</code>
     */
    public static final StockTb STOCK_TB = new StockTb();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StockTbRecord> getRecordType() {
        return StockTbRecord.class;
    }

    /**
     * The column <code>stock_db.stock_tb.id</code>.
     */
    public final TableField<StockTbRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stock_db.stock_tb.product_code</code>.
     */
    public final TableField<StockTbRecord, String> PRODUCT_CODE = createField("product_code", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stock_db.stock_tb.name</code>.
     */
    public final TableField<StockTbRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stock_db.stock_tb.description</code>.
     */
    public final TableField<StockTbRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>stock_db.stock_tb.price</code>.
     */
    public final TableField<StockTbRecord, BigDecimal> PRICE = createField("price", org.jooq.impl.SQLDataType.DECIMAL(10, 2).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>stock_db.stock_tb.count</code>.
     */
    public final TableField<StockTbRecord, Integer> COUNT = createField("count", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>stock_db.stock_tb.user_name</code>.
     */
    public final TableField<StockTbRecord, String> USER_NAME = createField("user_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>stock_db.stock_tb</code> table reference
     */
    public StockTb() {
        this(DSL.name("stock_tb"), null);
    }

    /**
     * Create an aliased <code>stock_db.stock_tb</code> table reference
     */
    public StockTb(String alias) {
        this(DSL.name(alias), STOCK_TB);
    }

    /**
     * Create an aliased <code>stock_db.stock_tb</code> table reference
     */
    public StockTb(Name alias) {
        this(alias, STOCK_TB);
    }

    private StockTb(Name alias, Table<StockTbRecord> aliased) {
        this(alias, aliased, null);
    }

    private StockTb(Name alias, Table<StockTbRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> StockTb(Table<O> child, ForeignKey<O, StockTbRecord> key) {
        super(child, key, STOCK_TB);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return StockDb.STOCK_DB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STOCK_TB_ID, Indexes.STOCK_TB_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<StockTbRecord, Integer> getIdentity() {
        return Keys.IDENTITY_STOCK_TB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StockTbRecord> getPrimaryKey() {
        return Keys.KEY_STOCK_TB_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StockTbRecord>> getKeys() {
        return Arrays.<UniqueKey<StockTbRecord>>asList(Keys.KEY_STOCK_TB_PRIMARY, Keys.KEY_STOCK_TB_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StockTb as(String alias) {
        return new StockTb(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StockTb as(Name alias) {
        return new StockTb(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StockTb rename(String name) {
        return new StockTb(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StockTb rename(Name name) {
        return new StockTb(name, null);
    }
}
