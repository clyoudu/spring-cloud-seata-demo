/*
 * This file is generated by jOOQ.
 */
package github.clyoudu.storage.jooq;


import github.clyoudu.storage.jooq.tables.StockTb;
import github.clyoudu.storage.jooq.tables.records.StockTbRecord;

import javax.annotation.Generated;

import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>stock_db</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<StockTbRecord, Integer> IDENTITY_STOCK_TB = Identities0.IDENTITY_STOCK_TB;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<StockTbRecord> KEY_STOCK_TB_PRIMARY = UniqueKeys0.KEY_STOCK_TB_PRIMARY;
    public static final UniqueKey<StockTbRecord> KEY_STOCK_TB_ID = UniqueKeys0.KEY_STOCK_TB_ID;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<StockTbRecord, Integer> IDENTITY_STOCK_TB = Internal.createIdentity(StockTb.STOCK_TB, StockTb.STOCK_TB.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<StockTbRecord> KEY_STOCK_TB_PRIMARY = Internal.createUniqueKey(StockTb.STOCK_TB, "KEY_stock_tb_PRIMARY", StockTb.STOCK_TB.ID);
        public static final UniqueKey<StockTbRecord> KEY_STOCK_TB_ID = Internal.createUniqueKey(StockTb.STOCK_TB, "KEY_stock_tb_id", StockTb.STOCK_TB.ID, StockTb.STOCK_TB.USER_NAME);
    }
}
