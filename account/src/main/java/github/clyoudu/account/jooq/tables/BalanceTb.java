/*
 * This file is generated by jOOQ.
 */
package github.clyoudu.account.jooq.tables;


import github.clyoudu.account.jooq.BalanceDb;
import github.clyoudu.account.jooq.Indexes;
import github.clyoudu.account.jooq.Keys;
import github.clyoudu.account.jooq.tables.records.BalanceTbRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BalanceTb extends TableImpl<BalanceTbRecord> {

    private static final long serialVersionUID = -1785595460;

    /**
     * The reference instance of <code>balance_db.balance_tb</code>
     */
    public static final BalanceTb BALANCE_TB = new BalanceTb();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BalanceTbRecord> getRecordType() {
        return BalanceTbRecord.class;
    }

    /**
     * The column <code>balance_db.balance_tb.id</code>.
     */
    public final TableField<BalanceTbRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>balance_db.balance_tb.user_name</code>.
     */
    public final TableField<BalanceTbRecord, String> USER_NAME = createField("user_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>balance_db.balance_tb.balance</code>.
     */
    public final TableField<BalanceTbRecord, BigDecimal> BALANCE = createField("balance", org.jooq.impl.SQLDataType.DECIMAL(16, 2).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * Create a <code>balance_db.balance_tb</code> table reference
     */
    public BalanceTb() {
        this(DSL.name("balance_tb"), null);
    }

    /**
     * Create an aliased <code>balance_db.balance_tb</code> table reference
     */
    public BalanceTb(String alias) {
        this(DSL.name(alias), BALANCE_TB);
    }

    /**
     * Create an aliased <code>balance_db.balance_tb</code> table reference
     */
    public BalanceTb(Name alias) {
        this(alias, BALANCE_TB);
    }

    private BalanceTb(Name alias, Table<BalanceTbRecord> aliased) {
        this(alias, aliased, null);
    }

    private BalanceTb(Name alias, Table<BalanceTbRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> BalanceTb(Table<O> child, ForeignKey<O, BalanceTbRecord> key) {
        super(child, key, BALANCE_TB);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BalanceDb.BALANCE_DB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BALANCE_TB_PRIMARY, Indexes.BALANCE_TB_USER_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BalanceTbRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BALANCE_TB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BalanceTbRecord> getPrimaryKey() {
        return Keys.KEY_BALANCE_TB_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BalanceTbRecord>> getKeys() {
        return Arrays.<UniqueKey<BalanceTbRecord>>asList(Keys.KEY_BALANCE_TB_PRIMARY, Keys.KEY_BALANCE_TB_USER_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BalanceTb as(String alias) {
        return new BalanceTb(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BalanceTb as(Name alias) {
        return new BalanceTb(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BalanceTb rename(String name) {
        return new BalanceTb(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BalanceTb rename(Name name) {
        return new BalanceTb(name, null);
    }
}
